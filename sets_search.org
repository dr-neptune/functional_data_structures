* Sets and Search Trees
:PROPERTIES:
:header-args: :session R-session :results output value table :colnames yes
:END:

We saw earlier how we can represent collections of elements such that we can efficiently iterate through them and efficiently merge two such collections. In this chapter, we turn bags into sets by considering data structures that allow us to efficiently insert, delete, and check for membership of elements: 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
insert <- function(x, elm) UseMethod("insert")
remove <- function(x, elm) UseMethod("remove")
member <- function(x, elm) UseMethod("member")
#+END_SRC

We do this with search trees -- trees with the property that all elements in the left subtree of a node will have values smaller than the element in the root node, and all to the right will be bigger. 

** Search Trees 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
search_tree_node <- function(value, left = empty_search_tree(), right = empty_search_tree()) {
    structure(list(left = left, value = value, right = right),
              class = c("unbalanced_search_tree"))
}

empty_search_tree <- function() search_tree_node(NA, NULL, NULL)
is_empty.unbalanced_search_tree <- function(x) is.null(x$left) && is.null(x$right)

# straight-forward membership test
member.unbalanced_search_tree <- function(x, elm) {
    if (is_empty(x)) return(FALSE)
    if (x$value == elm) return(TRUE)
    if (elm < x$value) member(x$left, elm)
    else member(x$right, elm)
}

# more complex
st_member <- function(x, elm, candidate = NA) {
    if (is_empty(x)) return(!is.na(candidate) && elm == candidate)
    else st_member(x$right, elm, x$value)
}

member.unbalanced_search_tree <- function(x, elm) st_member(x, elm)

insert.unbalanced_search_tree <- function(x, elm) {
    if (is_empty(x)) return(search_tree_node(elm))
    if (elm < x$value) search_tree_node(x$value, insert(x$left, elm), x$right)
    else if (elm > x$value) search_tree_node(x$value, x$left, insert(x$right))
    else x
}

# removal is slightly trickier. replace the element with the leftmost element in the right subtree and then remove that 
st_leftmost <- function(x) {
    while (!is_empty(x)) {
        value <- x$value
        tree <- x$left
    }
    value
}

remove.unbalanced_search_tree <- function(x, elm) {
    # if tree is empty, there is nothing to do
    if (is_empty(x)) return(x)
    if (x$value == elm) {
        a <- x$left
        b <- x$right
        if (is_empty(a)) return(b)
        if (is_empty(b)) return(a)

        s <- st_leftmost(x$right)
        return(search_tree_node(s, a, remove(b, s)))
    }
    # we need to search further down to remove the element
    if (elm < x$value) search_tree_node(x$value, remove(x$left, elm), x$right)
    else search_tree_node(x$value, x$left, remove(x$right, elm))
}
#+END_SRC

** Red-Black Search Trees 

These are kept balanced by imagining that we color all nodes either red or black and keep the following invariants:

1. No red node has a parent
2. Every path from the root to a leaf has some number of black nodes

The second invariant ensures that the tree is balanced if we only consider the black nodes. The first invariant guarantees that we can't have more red nodes along a path than we have black nodes. Consequently, the longest path from the root to a leaf is no more than twice the length of the shortest path, so we are guaranteed a logarithmic depth of all leaves. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
RED <- 1
BLACK <- 2

# helper function
red_black_tree_node <- function(color, value,
                         left = empty_red_black_tree(),
                         right = empty_red_black_tree()) {
    structure(list(color = color,
                   left = left,
                   value = value,
                   right = right),
              class = "red_black_tree")
}

empty_red_black_tree <- function() red_black_tree_node(BLACK, NA, NULL, NULL)

is_empty.red_black_tree <- function(x) is.null(x$left) && is.null(x$right)
#+END_SRC

The structure for the red black tree is the same as the unbalanced tree, except for the color information. Because both can use the same method, we can implement it for the superclass search_tree and simply let them both inherit it. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
member.search_tree <- function(x, elm) {
    st_member(x, elm)
}

# give both classes this superclass
search_tree_node <- function(value, left = empty_search_tree(), right = empty_search_tree()) {
    structure(list(left = left,
                   value = value,
                   right = right),
              class = c("unbalanced_search_tree", "search_tree"))
}

red_black_tree_node <- function(color, value,
                         left = empty_red_black_tree(),
                         right = empty_red_black_tree()) {
    structure(list(color = color,
                   left = left,
                   value = value,
                   right = right),
              class = c("red_black_tree", "search_tree"))
}
#+END_SRC

** Insertion 

The trick to inserting elements and keeping the tree balanced is to rearrange the tree after an insertion. We search down in the tree until we find the position where the new node should be inserted, and then we insert a new red leaf for the element. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
rbt_insert <- function(tree, elm) {
    if (is_empty(tree)) return(red_black_tree_node(RED, elm))
    if (elm < tree$value) rbt_balance(tree$color,
                                      tree$value,
                                      rbt_insert(tree$left, elm),
                                      tree$right)
    else if (elm > tree$value) rbt_balance(tree$color,
                                           tree$value,
                                           tree$left,
                                           rbt_insert(tree$right, elm))
    else tree
}

insert.red_black_tree <- function(x, elm, ...) {
    # insert the value in the tree and set the root to be black 
    new_tree <- rbt_insert(x, elm)
    new_tree$color <- BLACK
    new_tree
}
#+END_SRC

The rbt_balance function just checks the four cases displayed in the book and then performs the relevant transformation. 

Instead of doing a case analysis like was done for splay trees, we are going to check for the structure of the local tree, and bind nodes and subtrees to variables at the same time, using a bit of nonstandard evaluation. The trick is to evaluate parameters we provide to a function as if they are either assignments, which we do when we provide to a function when we have named parameters, or as logical expressions when they are just positional arguments. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
pattern_match <- function(...) {
    # get list of unvalued parameters
    bindings <- eval(substitute(alist(...)))

    # get parent frame scope 
    scope <- parent.frame()

    var_names <- names(bindings)
    for (i in seq_along(bindings)) {
        name <- var_names[i]
        val <- eval(bindings[[i]], scope)

        if (is.null(val)) return(FALSE)

        # for exps that aren't assignments, consider the conds that must be true for the pattern to match. Return false OW 
        if (nchar(name) == 0 &&
            (is.na(val) || !val)) return(FALSE)
        else if (nchar(name) > 0) assign(name, val, envir = scope)
    }
    return(TRUE)
}
#+END_SRC

We will check the structure of the tree by evaluating expressions that pick out subtrees and assign these subtrees to variables at the same time, and we will check the colors of nodes using logical expressions. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
pattern_match(a = left$left,
              b = left$right$left,
              c = left$right$right,
              d = right,
              x = left$value,
              y = left$right$value,
              z = value,
              color == BLACK,
              left$color == RED,
              left$right$color == RED)
#+END_SRC

We can see this function in action in the rbt_balance function. It checks whether any of the four patterns are matched by the current tree. If so, we transform according to the rules. Otherwise, we leave it be. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
rbt_balance <- function(color, value, left, right) {
    # set to avoid warnings
    a <- b <- c <- d <- x <- y <- z <- NULL

    if (pattern_match(a = left$left,
                      b = left$right$left,
                      c = left$right$right,
                      d = right,
                      x = left$value,
                      y = left$right$value,
                      z = value,
                      color == BLACK,
                      left$color == RED,
                      left$right$color == RED) ||
        pattern_match(a = left$left$left,
                      b = left$left$right,
                      c = left$right,
                      d = right,
                      x = left$left$value,
                      y = left$value,
                      z = value,
                      color == BLACK,
                      left$color == RED,
                      left$left$color == RED) ||
        pattern_match(a = left,
                      b = right$left,
                      c = right$right$left,
                      d = right$right$right,
                      x = value,
                      y = right$value,
                      z = right$right$value,
                      color == BLACK,
                      right$color == RED,
                      right$right$color == RED) ||
        pattern_match(a = left,
                      b = right$left$left,
                      c = right$left$right,
                      d = right$right,
                      x = value,
                      y = right$left$value,
                      z = right$value,
                      color == BLACK,
                      right$color == RED,
                      right$left$color == RED)) {
        left <- red_black_tree_node(color = BLACK,
                                    value = x,
                                    left = a,
                                    right = b)

        right <- red_black_tree_node(color = BLACK,
                                     value = z,
                                     left = c,
                                     right = d)

        red_black_tree_node(color = RED,
                            value = y,
                            left, right)
    } else {
        red_black_tree_node(color, value, left, right)
    }
}
#+END_SRC

** Deletion 

When it comes to deleting elements in a red-black search tree, the number of transformations necessary to maintain the invariants grows a bit. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
DOUBLE_BLACK <- 3

remove.red_black_tree <- function(x, elm, ...) {
    new_tree <- rbt_remove(x, elm)
    new_tree$color <- BLACK
    new_tree 
}

rbt_remove <- function(tree, elm) {
    if (is_empty(tree)) return(tree)
    if (tree$value == elm) {
        a <- tree$left
        b <- tree$right
        if (is_empty(a) && is_empty(b)) { # leaf
            if (tree$color == BLACK) return(red_black_tree_node(DOUBLE_BLACK, NA, NULL, NULL))
            else return(red_black_tree_node(BLACK, NA, NULL, NULL))
        } else if (is_empty(a) && is_empty(b)) { # one empty child
            non_empty <- if (is_empty(a)) b else a
            non_empty$color <- BLACK
            return(non_empty)
        } else { # inner node
            s <- st_leftmost(tree$right)
            return(rbt_rotate(tree$color, s, a, rbt_remove(b, s)))
        }
    }
    # we must search further down to remove the element 
    if (elm < tree$value) rbt_rotate(tree$color, tree$value, rbt_remove(tree$left, elm), tree$right)
    else rbt_rotate(tree$color, tree$value, tree$left, rbt_remove(tree$right, elm)) # elm > tree$value
}
#+END_SRC

I'll be skipping the case analysis version in favor of the pattern matching version presented.

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
rbt_rotate <- function(color, value, left, right) {
    if (pattern_match(a = left$left,
                      b = left$right$left,
                      c = left$right$right,
                      d = right,
                      x = left$value,
                      y = left$right$value,
                      z = value,
                      color == BLACK,
                      left$color == RED,
                      left$right$color == RED) ||
        pattern_match(a = left$left$left,
                      b = left$left$right,
                      c = left$right,
                      d = right,
                      x = left$left$value,
                      y = left$value,
                      z = value,
                      color == BLACK,
                      left$color == RED,
                      left$left$color == RED) ||
        pattern_match(a = left,
                      b = right$left,
                      c = right$right$left,
                      d = right$right$right,
                      x = value,
                      y = right$value,
                      z = right$right$value,
                      color == BLACK,
                      right$color == RED,
                      right$right$color == RED) ||
        pattern_match(a = left,
                      b = right$left$left,
                      c = right$left$right,
                      d = right$right,
                      x = value,
                      y = right$left$value,
                      z = right$value,
                      color == BLACK,
                      right$color == RED,
                      right$left$color == RED)) {
        left <- red_black_tree_node(color = BLACK,
                                    value = x,
                                    left = a,
                                    right = b)
        right <- red_black_tree_node(color = BLACK,
                                     value = z,
                                     left = c,
                                     right = d)
        red_black_tree_node(color = RED,
                            value = y,
                            left, right)
    } else if (pattern_match(a = left$left,
                             b = left$right$left,
                             c = left$right$right,
                             d = right,
                             x = left$value,
                             y = left$right$value,
                             z = value,
                             color == DOUBLE_BLACK,
                             left$color == RED,
                             left$right$color == RED) ||
               pattern_match(a = left,
                             b = right$left$left,
                             c = right$left$right,
                             d = right$right,
                             x = value,
                             y = right$left$value,
                             z = right$value,
                             color == DOUBLE_BLACK,
                             left$color == RED,
                             left$left$color == RED)) {
        left <- red_black_tree_node(BLACK, x, a, b)
        right <- red_black_tree_node(BLACK, z, c, d)
        red_black_tree_node(BLACK, y, left, right)
    } else {
        red_black_tree_node(color, value, left, right)
    }
}

# calculate the minimal and maximal depth for red-black trees
min_max_depth <- function(tree) {
    if (is_empty(tree)) return(c(0, 0))
    left_min_max <- min_max_depth(tree$left)
    right_min_max <- min_max_depth(tree$right)
    min_depth <- min(left_min_max[1], right_min_max[1]) + 1
    max_depth <- max(left_min_max[2], right_min_max[2]) + 1
    c(min = min_depth, max = max_depth)
}
#+END_SRC

** Visualizing Red-Black Trees

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
# helper function for traversing trees 
# we are going to use this by writing visitor functions and then use them to extract information from a tree
depth_first_visit_binary_tree <- function(tree, visitor) {
    if (!is_empty(tree)) {
        depth_first_visit_binary_tree(tree$left, visitor)
        depth_first_visit_binary_tree(tree$right, visitor)
    }
    visitor(tree)
}

# function for extracting a graph from  a tree
extract_graph <- function(tree) UseMethod("extract_graph")


extract_graph.search_tree <- function(tree) {
    n <- tree$dfn
    values <- vector("numeric", length = n)
    from <- vector("integer", length = n - 1)
    to <- vector("integer", length = n - 1)
    edge_idx <- 1

    extract <- function(tree) {
        # change index so the root number is 1
        i <- n - tree$dfn + 1
        values[i] <<- ifelse(is.na(tree$value, "", tree$value))

        if (!is_empty(tree)) {
            j <- n - tree$left$dfn + 1
            from[edge_idx] <<- i
            to[edge_idx] <<- j
            edge_idx <<- edge_idx + 1
            k <- n - tree$right$dfn + 1
            from[edge_idx] <<- i
            to[edge_idx] <<- k
            edge_idx <<- edge_idx + 1
        }
    }

    depth_first_visit_binary_tree(tree, extract)
    nodes <- tibble(values = values)
    edges <- tibble(from = from, to = to)
    list(nodes = nodes,
         edges = edges)
}

plot.search_tree <- function(x, ...) {
    x %>% node_number_annotate_tree %>%
        extract_graph %$%
        tbl_graph(nodes, edges) %>%
        mutate(leaf = node_is_leaf()) %>%
        ggraph(layout = "tree") +
        scale_x_reverse() +
        geom_edge_link() +
        geom_node_point(aes(filter = leaf),
                        size = 2,
                        shape = 21,
                        fill = "black") +
        geom_node_point(aes(filter = !leaf),
                        size = 10,
                        shape = 21,
                        fill = "white") +
        geom_node_text(aes(label = value),
                       vjust = 0.4) +
        theme_graph()
}

# red black tree 
extract_graph.red_black_tree <- function(tree) {
    n <- tree$dfn
    colors <- vector("numeric", length = n)
    extract <- function(tree) {
        i <- n - tree$dfn + 1
        colors[i] <<- tree$color
    }

    depth_first_visit_binary_tree(tree, extract)

    graph <- NextMethod()

    RB <- c("Red", "Black", "Double Black")

    nodes <- graph$nodes %>%
        add_column(color = RB[colors])
    edges <- graph$edges
    list(nodes = nodes, edges = edges)
}

# for plotting we call the superclass method and then modify the plot before returning it 
plot.red_black_tree <- function(x, ...) {
    NextMethod() +
        scale_fill_manual("Color",
                          values = c("Red" = "red",
                                     "Black" = "black",
                                     "Double Black" = "lightgray")) +
        geom_node_point(aes(filter = leaf, fill = color),
                        size = 2, shape = 21) +
        geom_node_point(aes(filter = !leaf, fill = color),
                        size = 10, shape = 21) +
        geom_node_text(aes(filter = color == "Black",
                           label = value),
                       color = "white", vjust = 0.4) +
        geom_node_text(aes(filter = color == "Double Black",
                           label = value),
                       color = "black", vjust = 0.4) +
        geom_node_text(aes(filter = color == "Red",
                           label = value),
                       color = "black", vjust = 0.4)
}

rb_tree <- empty_red_black_tree()

for (i in 1:10) rb_tree <- insert(rb_tree, i)

plot(rb_tree) # :( doesn't work : x is a list, but does not have components x and y
#+END_SRC

** Splay Trees 

With splay trees, the underlying idea is that we modify the tree whenever we search for a member. The way that they work as a search tree is that whenever we call member on a value, we will move that value up to the root of the tree. We do this with pattern matching, where we recognize certain tree structures and rearrange the tree for these. These rearrangements are called the splay operation. 

This is an ephemeral version. A persistent version would also return the modified tree. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
empty_splay_tree <- function() {
    ref <- new.env(parent = emptyenv())
    ref$tree <- empty_splay_heap()
    structure(ref, class = c("splay_tree", "search_tree"))
}

is_empty.splay_tree <- function(x) is_empty(x$tree)

# inserting is the same as for the splay heap
insert.splay_tree <- function(x, elm) {
    if (member(x, elm)) return(x)
    part <- partition(elm, x$tree)

    x$tree <- splay_tree_node(value = elm,
                              left = part$smaller,
                              right = part$larger)
    x
}

# same deletion logic as for the unbalanced tree 
splay_remove <- function(tree, elm) {
    if (is_empty(tree)) return(tree)

    if (tree$value == elm) {
        a <- tree$left
        b <- tree$right
        if (is_empty(a)) return(b)
        if (is_empty(b)) return(a)

        s <- st_leftmost(tree$right)
        return(splay_tree_node(s, a, splay_remove(b, s)))
    }

    # we need to search further down to remove the element 
    if (elm < tree$value) splay_tree_node(tree$value, splay_remove(tree$left, elm), tree$right)
    else splay_tree_node(tree$value, tree$left, splay_remove(tree$right, elm))
}

remove.splay_tree <- function(x, elm) {
    x$tree <- splay_remove(x$tree, elm)
    x
}

member.splay_tree <- function(x, elm) {
    x$tree <- splay(x$tree, elm)
    !is.na(x$tree$value) && x$tree$value == elm
}

#+END_SRC

The rest of the chapter is: 

- the enormous pattern matching splay function
- plotting functions (which require loading the ralgo library)
- performance overview 

