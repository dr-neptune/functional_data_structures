* Immutable and Persistent Data 
:PROPERTIES:
:header-args: :session R-session :results output value table :colnames yes
:END:

Whenever R makes it look like you are changing data, it is lying. When you assign an element to a vector, R has really replaced the vector with a new copy identical except for the replaced element. This way, it doesn't affect other references to the original data. 

** Persistent Data Structures 

A data structure that supports multiple versions is called persistent, whereas a data structure that only allows a single version at a time is called ephemeral. What we get out of immutable data is persistent data structures; these are the natural data structures in R. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
is_empty <- function(x) UseMethod("is_empty")

list_cons <- function(elem, lst) structure(list(item = elem, tail = lst), class = "linked_list")

list_nil <- list_cons(NA, NULL)

is_empty.linked_list <- function(x) identical(x, list_nil)

empty_list <- function() list_nil 

list_head <- function(lst) lst$item

list_tail <- function(lst) lst$tail
#+END_SRC

With these definitions, we can create 3 lists like this: 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
x <- list_cons(2, list_cons(1, empty_list()))
y <- list_cons(3, x)
z <- list_cons(4, empty_list())
#+END_SRC

** List Functions 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
list_reverse_helper <- function(lst, acc) {
    if (is_empty(lst)) acc
    else list_reverse_helper(list_tail(lst),
                             list_cons(list_head(lst), acc))
}

list_reverse_rec <- function(lst) list_reverse_helper(lst, empty_list())

lst_out <- list_cons(2, list_cons(8, empty_list()))

list_reverse_rec(lst_out)
#+END_SRC

A loop version of this would look like the following: 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
list_reverse_loop <- function(lst) {
    acc <- empty_list()

    while(!is_empty(lst)) {
        acc <- list_cons(list_head(lst), acc)
        lst <- list_tail(lst)
    }
    acc
}

list_reverse_loop(x)
#+END_SRC

