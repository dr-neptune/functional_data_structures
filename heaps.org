* Heaps 
:PROPERTIES:
:header-args: :session R-session :results output value table :colnames yes
:END:

Heaps, or priority queues, are collections of elements from an ordered set where besides checking for emptiness and inserting elements, we can also access and delete the smallest (or largest) element. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
is_empty <- function(x) UseMethod("is_empty")
insert <- function(x, elm) UseMethod("insert")
find_minimal <- function(heap) UseMethod("find_minimal")
delete_minimal <- function(heap) UseMethod("delete_minimal")

sqooba <- 1:10
#+END_SRC

It is possible for heaps to have multiple elements with the same value. 

We must also be able to merge two heaps 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
merge <- function(x, y) UseMethod("merge")
#+END_SRC

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
merge.default <- function(x, y) {
    while (!is_empty(y)) {
        x <- insert(x, find_minimal(y))
        y <- delete_minimal(y)
    }
    x
}

# 
merge.heap <- function(x, y) {
    while (!is_empty(y)) {
        x <- insert(x, find_minimal(y))
        y <- delete_minimal(y)
    }
    x
}
#+END_SRC

We can make our heap implementations inherit from a generic heap class. 

One use of heaps is for sorting elements. This is known as heap sort 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
# create a linked list from a heap 
heap_to_list <- function(x) {
    l <- empty_list()
    while (!is_empty(x)) {
        l <- list_cons(find_minimal(x), l)
         x <- delete_minimal(x)
    }
    l
}
#+END_SRC

This adds all the elements in decreasing rather than increasing order

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
vector_to_heap <- function(empty_heap, vec) {
    heap <- empty_heap()
    for (e in vec) heap <- insert(heap, e)
    heap
}
#+END_SRC

Now we can sort the heap like so 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
heap_sort <- function(vec, empty_heap) {
    heap <- vector_to_heap(empty_heap, vec)
    lst <- heap_to_list(heap)
    list_reverse(lst)
}
#+END_SRC

The time complexity of the heap sort function depends on the time complexity of the heap operations. We can reverse lst in linear time. If insert, find_minimal, and delete_minimal all run in log time, the entire sort can be done in o(nlogn).  

Constructing heaps in linear time uses the merge function. Instead of adding one element at a time, we construct a sequence of heaps and merge them.
 
#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
singleton_heap <- function(empty_heap, e) insert(empty_heap, e)

vector_to_heap <- function(vec, empty_heap, empty_queue) {
    q <- empty_queue()
    for (e in vec) q <- enqueue(q, singleton_heap(empty_heap, e))
    repeat {
        # get first element of queue and remove it from the queue
        first <- front(q)
        q <- dequeue(q)
        if (is_empty(q)) break
        # get second element
        second <- front(q)
        q <- dequeue(q)
        # create new heap out of first 2 elements
        new_heap <- merge(first, second)
        # add the new heap to the queue 
        q <- enqueue(q, new_heap)
    }
    first
}
#+END_SRC

With the implementation above, we would need to modify the heap sort algorithm to look like this: 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
heap_sort <- function(vec, empty_heap, empty_queue) {
    heap <- vector_to_heap(vec, empty_heap, empty_queue)
    lst <- heap_to_list(heap)
    list_reverse(lst)
}
#+END_SRC

When we work with trees, we say that a tree has the *heap property* if every node in the tree contains a value and the nodes in the tree satisfy that all children of a node have values greater than the value in the node.

** Leftist Heaps 

Leftist heaps are a classical implementation of heaps based on the idea that we can represent the heap as a binary tree with the heap property and we can make sure that the left subtree is always at least as large as the right subtree. This structure exploits a general trick in data structure design called the smaller half trick. If you have to do some computation recursively, but you only have to do it for one of the two children in a binary tree, you pick the smaller of the two trees. If you do this, you slice away half the size of the tree in each recursive call. With this idea, you never recurse deeper than the logarithm of the full data size. 

We will always recurse to the right in the heap, so the length of the rightmost path (called the rank) is what we worry about and we make sure to always have the shorted path as the rightmost. A variant of this is called the maxiphopic heap, which generalizes such that we don't care which side of the tree is larger. 

To keep the invariant that the left subtree always has a smaller rank than the right subtree, we keep track of tree ranks. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
leftist_heap_node <- function(value,
                       left = empty_leftist_heap(),
                       right = empty_leftist_heap(),
                       rank = 0) {
    structure(list(left = left,
                   value = value,
                   right = right,
                   rank = rank),
              class = c("leftist_heap", "heap"))
}

# use the sentinel trick from earlier 
empty_leftist_heap_node <- leftist_heap_node(NA, NULL, NULL)

empty_leftist_heap <- function() empty_leftist_heap_node

is_empty.leftist_heap <- function(x) is.null(x$left) && is.null(x$right)

# because a leftist heap has the heap property, we can always get the minimum as the root of the tree 
find_minimal.leftist_heap <- function(heap) heap$value

# to delete the minimal value, we need to get rid of the value of the root 
delete_minimal.leftist_heap <- function(heap) merge(heap$left, heap$right)

# inserting is equally simple. make a singleton heap and merge it into the existing heap 
insert.leftist_heap <- function(x, elm) merge(x, leftist_heap_node(elm))

# all the complexity is in the merge function 
# we exploit the fact that the right subtree is never more than half as deep as the full heap
# we take the min val in the root, put the left part of the first tree as the left subtree and then merge recursively on the right
build_leftist_heap <- function(value, a, b) {
    if (a$rank >= b$rank) leftist_heap_node(value = value, left = a, right = b, rank = b$rank + 1)
    else leftist_heap_node(value = value, left = b, right = a, rank = a$rank + 1)
}

merge.leftist_heap <- function(x, y) {
    if (is_empty(x)) return(y)
    if (is_empty(y)) return(x)
    if (x$value <= y$value) build_leftist_heap(x$value, x$left, merge(x$right, y))
    else build_leftist_heap(y$value, y$left, merge(y$right, x))
}
#+END_SRC

** Binomial Heaps

Binomial heaps are based on binomial trees, which are trees with the heap structure and the additional invariants:

- A binomial tree of rank 0 is a singleton
- A tree of rank r has r children, t1 t2 ... tn, where ti is a binomial tree with rank r - i

We are not going to use these as an abstract data structure, so we will implement them using a list: 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
binomial_tree_node <- function(value, trees) {
    list(value = value,
         trees = trees)
}
#+END_SRC

We build binomial trees by linking them. This is an operation that we will only do on trees with the same rank, and what the operation does it make one of the trees the leftmost subtree of the other. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
link_binomial_trees <- function(t1, t2) {
    if (t1$value < t2$value) binomial_tree_node(t1$value, list_cons(t2, t1$trees))
    else binomial_tree_node(t2$value, list_cons(t1, t2$trees))
}
#+END_SRC

binomial trees are lists of trees, each with their associated rank that we can keep track of. The minimal value is in one of the heaps, but in order to keep from needing to search we will remember it explicitly. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
binomial_heap_node <- function(rank, tree) {
    list(rank = rank, tree = tree)
}

binomial_heap <- function(min_val, heap_nodes = empty_list()) {
    structure(list(min_value = min_val,
                   heap_nodes = heap_nodes),
              class = c("binomial_heap", "heap"))
}

# an empty binomial heap is just one without any binary trees 
empty_binomial_heap <- function() binomial_heap(NA)

is_empty.binomial_heap <- function(x) is_empty(x$heap_nodes)

# since we explicitly track the minimum, this is trivial 
find_minimal.binomial_heap <- function(heap) heap$min_value
#+END_SRC

We now insist on the following invariant for how the binomial trees are used in a binomial heap: no two trees can have the same rank. This creates a correspondence between the rank of binomial trees in a heap and the binary representation of the number of elements in the heap. For each 1 in the binary representation, we will have a tree of that rank. 

With this in mind, we can think of both insertions and merge as a variant of binary addition. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
# to insert a new value in a heap, first create a singleton heap node with a tree of rank 0 holding the value
singleton_binomial_heap_node <- function(value) {
    tree <- binomial_tree_node(value, empty_list())
    binomial_heap_node(0, tree)
}
#+END_SRC

Now we need to insert this node. If there is no node with rank 0 already, we just put it in. If there is, that slot is taken, so we must change our tactic. We can link the existing tree of rank 0 with the new singleton, creating a node with rank 1. If that slow is free, we are done. Otherwise, we must link again. If we always keep our trees in a heap ordered in increasing rank, this approach can be implemented like this: 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
insert_binomial_node <- function(new_node, heap_nodes) {
    if (is_empty(heap_nodes)) return(list_cons(new_node, empty_list()))

    first_node <- list_head(heap_nodes)

    if (new_node$rank < first_node$rank) list_cons(new_node, heap_nodes)
    else {
        new_tree <- link_binomial_trees(new_node$tree, first_node$tree)
        new_node <- binomial_heap_node(new_node$rank + 1, new_tree)
        insert_binomial_node(new_node, list_tail(heap_nodes))
    }
}

# insert now consists of updating the min val (if necessary) and inserting the new val starting from a singleton
insert.binomial_heap <- function(x, elm, ...) {
    new_min_val <- min(x$min_value, elm, na.rm = TRUE)
    new_node <- singleton_binomial_heap_node(elm)
    new_nodes <- insert_binomial_node(new_node, x$heap_nodes)
    binomial_heap(new_min_val, new_nodes)
}
#+END_SRC

Merging two heaps also works similarly to binary addition. We have the two heaps represented as lists of binary trees in increasing rank order, so we can implement this as a list merge. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
merge_heap_nodes <- function(x, y) {
    if (is_empty(x)) return(y)
    if (is_empty(y)) return(x)

    first_x <- list_head(x)
    first_y <- list_head(y)

    if (first_x$rank < first_y$rank) list_cons(first_x, merge_heap_nodes(list_tail(x), y))
    else if (first_y$rank < first_x$rank) list_cons(first_y, merge_heap_nodes(list_tail(y), x))
    else {
        new_tree <- link_binomial_trees(first_x$tree, first_y$tree)
        new_node <- binomial_heap_node(first_x$rank + 1, new_tree)
        rest <- merge_heap_nodes(list_tail(x), list_tail(y))
        insert_binomial_node(new_node, rest)
    }
}

# the actual merge operation just needs to keep track of the new minimal value in addition to merging the heap nodes
merge.binomial_heap <- function(x, y, ...) {
    if (is_empty(x)) return(y)
    if (is_empty(y)) return(x)
    new_min_val <- min(x$min_value, y$min_value)
    new_nodes <- merge_heap_nodes(x$heap_nodes, y$heap_nodes)
    binomial_heap(new_min_val, new_nodes)
}

# the insertion operation is really just a special case of the merge, as it was for leftist heaps. We could have implemented it in terms of merging like this: 
insert_binomial_node <- function(new_node, heap_nodes) {
    merge_heap_nodes(list_cons(new_node, empty_list()),
                     heap_nodes)
}
#+END_SRC

Deleting the minimal value from a binomial heap involves more code because we need to manipulate lists. The minimal value is found at the root of one of the trees in the heap. We need to find this tree, and delete it from the list of trees. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
get_minimal_node <- function(min_value, heap_nodes) {
    first_node <- list_head(heap_nodes)
    if (first_node$tree$value == min_value) first_node
    else get_minimal_node(min_value, list_tail(heap_nodes))
}

delete_minimal_node <- function(min_value, heap_nodes) {
    first_node <- list_head(heap_nodes)
    if (first_node$tree$value == min_value) list_tail(heap_nodes)
    else {
        rest <- delete_minimal_node(min_value, list_tail(heap_nodes))
        list_cons(first_node, rest)
    }
}
#+END_SRC

We need to put the rest of the values in the tree containing the minimal value node back into the heap. We do this by merging them into the heap nodes. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
binomial_trees_to_nodes <- function(rank, trees) {
    if (is_empty(trees)) empty_list()
    else {
        list_cons(binomial_heap_node(rank, list_head(trees)),
                  binomial_trees_to_nodes(rank - 1, list_tail(trees)))
    }
}

# update the value we store for the new smallest value
binomial_nodes_min_value <- function(heap_nodes, cur_min = NA) {
    if (is_empty(heap_nodes)) cur_min
    else {
        front_value <- list_head(heap_nodes)$tree$value
        new_cur_min <- min(cur_min, front_value, na.rm = TRUE)
        binomial_nodes_min_value(list_tail(heap_nodes), new_cur_min)
    }
}

delete_minimal.binomial_heap <- function(heap) {
    min_node <- get_minimal_node(heap$min_value, heap$heap_nodes)
    other_nodes <- delete_minimal_node(heap$min_value, heap$heap_nodes)
    min_node_nodes <- binomial_trees_to_nodes(min_node$rank - 1, min_node$tree$trees)
    new_nodes <- merge_heap_nodes(other_nodes, list_reverse(min_node_nodes))
    new_min_value <- binomial_nodes_min_value(new_nodes)
    binomial_heap(new_min_value, new_nodes)
}
#+END_SRC

Because of the amortized constant time insertion operation, constructing binomial heaps is much more efficient than constructing leftist heaps 

The benefit of using binomial heaps over leftist heaps is only relevant when we build heaps by inserting elements one at a time. If we use the algorithm that constructs heaps by iteratively merging larger and larger heaps, then both binomial and leftist heaps are constructed in linear time and the leftist heap has smaller overhead. 

** Splay Heaps 

Splay trees are really search trees, and as such they have the search tree property -- all values in a left subtree are smaller than the value in the root, and all values in the right subtree are larger -- rather than the heap property. We will use them here to implement a heap. 

The invariant for search trees is: the value in the node is larger than all the values in the left subtree and smaller than all the values in the right subtree. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
splay_tree_node <- function(value, left = NULL, right = NULL) {
    list(left = left, value = value, right = right)
}

splay_heap <- function(min_value, splay_tree) {
    structure(list(min_value = min_value,
                   tree = splay_tree),
              class = c("splay_heap", "heap"))
}

empty_splay_heap <- function() splay_heap(NA, NULL)
is_empty.splay_heap <- function(x) is.null(x$tree)

# we explicitly store the minimal value in the heap so we can return it in constant time 
find_minimal.splay_heap <- function(heap) {
    heap$min_value
}

# to find the node with the min val, we need to find the left-most node in the tree 
splay_find_minimal_value <- function(tree) {
    if (is.null(tree)) NA
    else if (is.null(tree$left)) tree$value
    else splay_find_minimal_value(tree$left)
}

splay_tree_maximal_value <- function(tree) {
    if (is.null(tree)) NA
    else if (is.null(tree$right)) tree$value
    else splay_tree_maximal_value(tree$right)
}
#+END_SRC

Instead of balancing splay trees, we blindly rearrange trees whenever we modify them. Whenever we delete or insert values, we will do a kind of rebalancing that pulls the modified parts of the tree closer to the root. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
# here is the code for deleting the minimal node in a splay tree
splay_delete_minimal_value <- function(tree) {
    if (is.null(tree$left)) tree$right
    else {
        a <- tree$left$left
        x <- tree$left$value
        b <- tree$left$right
        y <- tree$value
        c <- tree$right

        if (is.null(a)) splay_tree_node(left = b, value = y, right = c)
        else splay_tree_node(left = splay_delete_minimal_value(a),
                             value = x,
                             right = splay_tree_node(left = b, value = y, right = c))
    }
}
#+END_SRC

We are not balancing the tree, but we are making the search path for the smallest value shorter on average, and it can be shown that we end up with an amortized O(logn) running time per delete_minimal option if we use this approach.

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
# delete minimal value in the splay heap 
delete_minimal.splay_heap <- function(heap) {
    if (is_empty(heap)) stop("Can't delete min in an empty heap")
    new_tree <- splay_delete_minimal_value(heap$tree)
    new_min_value <- splay_find_minimal_value(new_tree)
    splay_heap(min_value = new_min_value,
               splay_tree = new_tree)
}
#+END_SRC 

When inserting a new element into a splay tree, we always put it at the root. To ensure the search tree property we have a function , partition, that collects all the smaller and all the larger elements than a pivot element and returns them as splay trees. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
# partition is a huge function. I dont feel like writing it

# we could also split this into a series of cases, write functions for each, and then recombine them. This is also very long
#+END_SRC

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
# insert
insert.splay_heap <- function(x, elm) {
    part <- partition(elm, x$tree)
    new_tree <- splay_tree_node(value = elm,
                                left = part$smaller,
                                right = part$larger)

    new_min_value <- min(x$min-value, elm, na.rm = TRUE)
    splay_heap(min_value = new_min_value,
               splay_tree = new_tree)
}

# to merge we partition on the root of one, put that root at the root of the new tree, and then merge the left and right subtrees into the smaller and larger parts of the partition, recursively. The whole op is O(n)
merge_splay_trees <- function(x, y) {
    if (is.null(x)) return(y)
    if (is.null(y)) return(x)

    a <- x$left
    val <- x$value
    b <- x$right

    part <- partition(val, y)
    splay_tree_node(left = merge_splay_trees(part$smaller, a),
                    value = val,
                    right = merge_splay_trees(part$larger, b))
}

merge.splay_heap <- function(x, y, ...) {
    if (is_empty(x)) return(y)
    if (is_empty(y)) return(x)

    new_tree <- merge_splay_trees(x$tree, y$tree)
    new_min_value <- min(x$min_value, y$min_value, na.rm = TRUE)
    splay_heap(min_value = new_min_value,
               splay_tree = new_tree)
}
#+END_SRC

Splay heaps seem ideal for working with sequences that are almost in order, and when it comes to performance for constructing heaps, this is true. We can construct splay heaps quickly because we don't balance them. This will cost us later when we have to search down in the heap. 

** Heaps and Sorting 

If we want to sort a sequence of elements, we can build a heap from them and then iteratively extract the minimal element. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
heap_sort <- function(x, empty_heap) {
    n <- length(x)

    # build the heap
    heap <- vector_to_heap(x, empty_heap, empty_env_queue())

    # extract elements in increasing order
    result <- vector(typeof(x), length = n)
    for (i in seq_along(result)) {
        result[i] <- find_minimal(heap)
        heap <- delete_minimal(heap)
    }
    result
}
#+END_SRC

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
library(ralgo)
(x <- sample(10))

heap_sort(x, empty_leftist_heap())
#+END_SRC
