* Bags, Stacks, and Queues 
:PROPERTIES:
:header-args: :session R-session :results output value table :colnames yes
:END:

In this chapter we will consider three abstract data structures: 
- a bag is a set which we can efficiently traverse, at the cost of membership queries 
- a stack is a LIFO collection of elements where we can efficiently get the last element added to the stack
- a queue is a FIFO collection of elements where we can efficiently get the first element added to the stack 

For bags:

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
is_empty <- function(x) UseMethod("is_empty")
insert <- function(x, elm) UseMethod("insert")
merge <- function(x, y) UseMethod("merge")
#+END_SRC 

For stacks: 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
is_empty <- function(x) UseMethod("is_empty")
push <- function(x, elm) UseMethod("push")
pop <- function(x) UseMethod("pop")
top <- function(x) UseMethod("top")
#+END_SRC

For queues: 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
is_empty <- function(x) UseMethod("is_empty")
enqueue <- function(x, elm) UseMethod("enqueue")
front <- function(x) UseMethod("front")
dequeue <- function(x) UseMethod("dequeue")
#+END_SRC

** Bags 

Bags are just collections of elements. They can be added and merged, but you cannot remove elements and there is no natural order to them unlike lists. 

We can implement them with lists. In this case we need to be able to create an empty bag and to test for emptiness. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
bag_cons <- function(elm, lst) structure(list(item = elm, tail = lst),
                                  class = c("list_bag", "linked_list"))

bag_nil <- bag_cons(NA, NULL)

is_empty.list_bag <- function(x) identical(x, bag_nil)

empty_list_bag <- function() bag_nil

# insert is simple, put an element at the front of the list
insert.list_bag <- function(elm, bag) bag_cons(elm, bag)

# this is for the merge function
list_concatenate <- function(l1, l2) {
    if (is_empty(l1)) l2
    else list_cons(list_head(l1),
                   list_concatenate(list_tail(l1), l2))
}

# if our two bags are disjoint, we can just concatenate them
# since list_concatenate is a list function, we must remember to set the class function
merge.list_bag <- function(x, y) {
    result <- list_concatenate(x, y)
    class(result) <- c("list_bag", "linked_list")
    result
}
#+END_SRC

list concatenation is a O(n) operation. We can improve bag merge by using a tree to hold bags. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
bag_node <- function(elm, left, right) structure(list(item = elm, left = left, right = right), class = "tree_bag")

tree_bag_nil <- bag_node(NA, NULL, NULL)

is_empty.tree_bag <- function(x) identical(x, tree_bag_nil)

empty_tree_bag <- function() tree_bag_nil
#+END_SRC

Then for inserting a new element, we create a leaf. If we have an empty tree, we return the node, otherwise we just put the leaf to the left of a new root and the bag at the right. We don't need to keep the tree balanced because we don't plan to search it or delete elements from it; we just want to be able to traverse all the elements. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
insert.tree_bag <- function(x, elm) {
    element_leaf <- bag_node(elm, empty_tree_bag(), empty_tree_bag())
    if (is_empty(x)) element_leaf
    else bag_node(NA, element_leaf, x)
}

x <- insert(insert(insert(empty_tree_bag(), 7), 5), 1)

insert(x, 4)
#+END_SRC

Merging can now be done in constant time. We must be careful not to create inner nodes with empty subtrees, but otherwise we are good.

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
merge.tree_bag <- function(x, y) {
    if (is_empty(x)) return(y)
    if (is_empty(y)) return(x)
    bag_node(NA, x, y)
}
#+END_SRC

Traversing the elements in a bag can be done by recursing over the tree. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
is_leaf <- function(x) is_empty(x$left) && is_empty(x$right)

bag_to_list <- function(x, acc = empty_list()) {
    if (is_leaf(x$left)) list_cons(x$item, acc)
    else bag_to_list(x$right, bag_to_list(x$left, acc))
}
#+END_SRC

This implementation assumes that the bags are disjoint. If they are not, we would need to sort them, and then merge them. This changes our time complexity to O(nlogn) due to the sorting.

** Stacks 

Stacks are collections of elements where we can insert elements and remove them again in a last in, first out order. These are easy to implement using lists

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
stack_cons <- function(elm, lst) structure(list(item = elm, tail = lst), class = c("stack", "linked_list"))

stack_nil <- stack_cons(NA, NULL)

is_empty.stack <- function(x) identical(x, stack_nil)

empty_stack <- function() stack_nil

# we can just reuse list functions
push.stack <- function(x, elm) stack_cons(elm, x)
pop.stack <- function(x) list_tail(x)
top.stack <- function(x) list_head(x)

x <- stack_cons("a", empty_stack())

x <- push.stack(x, "b")

x <- push.stack(push.stack(push.stack(x, "c"), "d"), "e")

g <- pop.stack(x)

pop.stack(g)
#+END_SRC

** Queues 

A straight-forward implementation of functional queues would allow us to enqueue elements in constant time, but get the front element and dequeue it in liner time. There is a trick for getting an amortized constant time operations queue. This means that the worst-case time usage for each individual operation will not be constant time, but whenever we have done n operations in total, we have spent O(n) time. 

The trick is this: 

Keep track of two lists, one that represents the front of the queue, and another that represents the back. The front of the queue is ordered s.t. we can get the front as the head of this list, and the back of the queue is ordered s.t. we can enqueue elements by putting them at the head of that list. From time to time, we have to move elements from the back list to the front lists; this happens whenever the front list is empty and we try to get the front of the queue or try to dequeue from the queue.

Whenever we need to move elements from the back of the queue to the front, we need to copy and reverse the back of the queue list. On average, a linear number of operations take a linear amount of time. Since enqueueing is constant time, and the operation for reversing the rear queue is O(n), over time it averages out to be O(n).

Implementing this queue solution gives the author an opportunity to show a general trick for handling queries that modify data structures in R: using environments that we can modify. After that we can look at a simpler solution for queues -- but this version isn't always possible so it's worth knowing the general trick. 

R is not a pure functional language; we can not modify data, but we can modify environments. 

** Side Effects Through Environments 

Because we can modify environments, we can create an environment object and use it as our queue. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
queue_environment <- function(front, back) {
    e <- new.env(parent = emptyenv())
    e$front <- front
    e$back <- back
    class(e) <- c("env_queue", "environment")
    e
}
#+END_SRC

Here we set the parent of the environment to be the empty environment. If we didn't, the default would be to take the local closure as the parent. 
This is neither a pure, or persistent data structure, but it works. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
empty_env_queue <- function() queue_environment(empty_list(), empty_list())

is_empty.env_queue <- function(x) is_empty(x$front) && is_empty(x$back)

# add an element to the back of the queue 
enqueue.env_queue <- function(x, elm) { x$back <- list_cons(elm, x$back); x }

# if the front list is empty, replace it with the reversed back list and set back list to empty. ow take front list 
list_reverse <- list_reverse_rec

front.env_queue <- function(x) {
    if (is_empty(x$front)) {
        x$front <- list_reverse(x$back)
        x$back <- empty_list()
    }
    list_head(x$front)
}

# remove element from the front of the queue 
dequeue.env_queue <- function(x) {
    if (is_empty(x$front)) {
        x$front <- list_reverse(x$back)
        x$back <- empty_list()
    }
    x$front <- list_tail(x$front)
    x
}
#+END_SRC

** Side Effects Through Closures 

If we create closures -- functions defined inside other functions -- we get an implicit enclosing environment that we can use to update data. We can use such a closure to get a reference to a queue that we can update. 

We could create a local environment that contains the front and back lists, but to show an alternative we can keep a single queue object in the closure environments and update it by replacing it with updated queues when needed.

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
queue <- function(front, back) list(front = front, back = back)

queue_closure <- function() {
    q <- queue(empty_list(), empty_list())

    queue_is_empty <- function() is_empty(q$front) && is_empty(q$back)

    enqueue <- function(elm) q <<- queue(q$front, list_cons(elm, q$back))

    front <- function() {
        if (is_empty(q$front)) {
            q <<- queue(list_reverse(q$back), empty_list())
        }
        list_head(q$front)
    }

    dequeue <- function() {
        if (is_empty(q$front)) q <<- queue(list_tail(list_reverse(q$back)), empty_list())
        else q <<- queue(list_tail(q$front), q$back)
    }

    structure(list(is_empty = queue_is_empty,
                   enqueue = enqueue,
                   front = front,
                   dequeue = dequeue),
              class = "closure_queue")
}
#+END_SRC

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
# create an empty queue 
empty_queue <- function() queue_closure()

# implement generic functions for the queue interface, using dispatch on the appropriate closures
is_empty.closure_queue <- function(x) x$queue_is_empty()

enqueue.closure_queue <- function(x, elm) { x$enqueue(elm); x }

front.closure_queue <- function(x) x$front()

dequeue.closure_queue <- function(x) { x$dequeue(); x }
#+END_SRC

** A Purely Functional Queue 

The reason why we couldn't make the queue data structure purely functional before was that the accessor function front needed to get to the last element in the back list, which could not be done in amortized constant time unless we modified the queue when the front_list was empty.

Since we only need to keep track of one element, we can make a persistent queue if we explicitly remember that value in a way where we can get to it in constant time. 

We can make an extended version of the queue that contains the two lists front and back, and the element we need to return if we call front on a queue when the front list is empty.

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
queue_extended <- function(x, front, back) structure(list(x = x, front = front, back = back), class = "extended_queue")
#+END_SRC

With this representation we will require the invariant that x refers to the last element in the back list when the list is not empty. If back is empty, we don't care what x is. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
empty_extended_queue <- function() queue_extended(NA, empty_list(), empty_list())

is_empty.extended_queue <- function(x) is_empty(x$front) && is_empty(x$back)

# we need to remember elements placed at the back of a queue
enqueue.extended_queue <- function(x, elm) {
    queue_extended(ifelse(is_empty(x$back), elm, x$x),
                   x$front,
                   list_cons(elm, x$back))
}

# when we need the front element, if front list is empty, return the last element in the back list. Else return the head
front.extended_queue <- function(x) {
    if (is_empty(x$front)) x$x
    else list_head(x$front)
}

dequeue.extended_queue <- function(x) {
    if (is_empty(x$front))
        x <- queue_extended(NA, list_reverse(x$back), empty_list())
    queue_extended(x$x, list_tail(x$front), x$back)
}

x <- empty_extended_queue()

is_empty(x)

# you a got a bee on your queue 
front.extended_queue(
    dequeue.extended_queue(
        enqueue.extended_queue(
            enqueue.extended_queue(
                enqueue.extended_queue(
                    enqueue.extended_queue(x, "A"),
                    "B"),
                "C"),
            "D")))
#+END_SRC

** Double-Ended Queues 

A deque is a queue where you can add and remove elements from both ends of it. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
enqueue_front <- function(x, elm) UseMethod("enqueue_front")
enqueue_back <- function(x, elm) UseMethod("enqueue_back")

front <- function(x) UseMethod("front")
back <- function(x) UseMethod("back")

dequeue_front <- function(x) UseMethod("dequeue_front")
dequeue_back <- function(x) UseMethod("dequeue_back")
#+END_SRC

Instead of reversing and moving an entire list when the other is empty, we move only half the other list. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
# if we know how many elements are in half the list, we can use these functions for moving half the list. 
list_get_n_reversed <- function(lst, n) {
    l <- empty_list()
    while (n > 0) {
        l <- list_cons(list_head(lst), l)
        lst <- list_tail(lst)
        n <- n - 1
    }
    l
}

list_drop_n <- function(lst, n) {
    l <- lst
    while (n > 0) {
        l <- list_tail(l)
        n <- n - 1
    }
    l
}

# get list length 
list_length <- function(lst) {
    n <- 0
    while (!is_empty(lst)) {
        lst <- lst$tail
        n <- n + 1
    }
    n
}
#+END_SRC

Now we can implement the double ended queue 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
deque_environment <- function(front, back, front_length, back_length) {
    e <- new.env(parent = emptyenv())
    e$front <- front
    e$back <- back
    e$front_length <- front_length
    e$back_length <- back_length
    class(e) <- c("env_deque", "environment")
    e
}

empty_env_deque <- function() deque_environment(empty_list(), empty_list(), 0, 0)

is_empty.env_deque <- function(x) is_empty(x$front) && is_empty(x$back)

enqueue_back.env_deque <- function(x, elm) {
    x$back <- list_cons(elm, x$back)
    x$back_length <- x$back_length + 1
    x
}

enqueue_front.env_deque <- function(x, elm) {
    x$front <- list_cons(elm, x$front)
    x$front_length <- x$front_length + 1
    x
}

# when we modify lists, we need to update the lengths as well
# the next 2 are helper functions for this purpose 
move_front_to_back <- function(x) {
    n <- list_length(x$front)
    m <- ceiling(n)
    x$back <- list_get_n_reversed(x$front, m)
    x$front <- list_drop_n(x$front, m)
    x$back_length <- m
    x$front_length <- n - m
}

move_back_to_front <- function(x) {
    n <- list_length(x$back)
    m <- ceiling(n)
    x$front <- list_get_n_reversed(x$back, m)
    x$back <- list_drop_n(x$back, m)
    x$back_length <- m
    x$front_length <- n - m
}

front.env_deque <- function(x) {
    if (is_empty(x$front)) move_back_to_front(x)
    list_head(x$front)
}

back.env_deque <- function(x) {
    if (is_empty(x$back)) move_front_to_back(x)
    list_head(x$back)
}

dequeue_front.env_deque <- function(x) {
    if (is_empty(x$front)) move_back_to_front(x)
    x$front <- list_tail(x$front)
    x
}

dequeue_back.env_deque <- function(x) {
    if (is_empty(x$back)) move_front_to_back(x)
    x$back <- list_tail(x$back)
    x
}

#+END_SRC


** Implementing Lazy Evaluation 

Expressions in R are evaluated immediately except for expressions that are passed as parameters to functions. We can wrap expressions we don't want to evaluate yet in thunks, functions that don't take any arguments but evaluate an expression. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
lazy_thunk <- function(exp) function() exp 
#+END_SRC

This takes an expression and returns a thunk which will evaluate when we call it. It will only evaluate the first time though, as R remembers the values of such parameters once they are evaluted. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
library(microbenchmark)

microbenchmark(lazy_vector <- lazy_thunk(1:100000), times = 1)
microbenchmark(lazy_vector()[1], times = 1)
microbenchmark(lazy_vector()[1], times = 1)
#+END_SRC

We need to be a little careful with functions like lazy_thunk. The exp parameter will be evaluated when we call the thunk for the first time, and it will be evaluated in the calling scope when we constructed the thunk. If it depends on variables that have been modified since we created the thunk, the expression might not be the one we want. 

We typically use force() to alleviate this problem. It forces the evaluation of the parameter. 


** Lazy Lists 

We will make the following invariant for lazy lists: a list is always a thunk that either returns NULL when the list is empty, or a structure with a car and a cdr field. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
# implement construction and accessors
nil <- function() NULL

cons <- function(car, cdr) {
    force(car); force(cdr)
    function() list(car = car, cdr = cdr)
} 

is_nil <- function(lst) is.null(lst())
car <- function(lst) lst()$car 
cdr <- function(lst) lst()$cdr

# we can take any linked list functions and make them lazy lists by wrapping what they return in a thunk 
concat <- function(l1, l2) {
    rev_l1 <- nil
    while (!is_nil(l1)) {
        rev_l1 <- cons(car(l1), rev_l1)
        l1 <- cdr(l1)
    }
    result <- l2
    while(!is_nil(rev_l1)) {
        result <- cons(car(rev_l1), result)
        rev_l1 <- cdr(rev_l1)
    }
    result
}
#+END_SRC

This does what the previous concatenation did, but with lazy lists. It is not lazy itself though; it takes linear time to execute and does the reversal right away. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
vector_to_list <- function(v) {
    lst <- nil
    for (x in rev(v)) lst <- cons(x, lst)
    lst
}

l1 <- vector_to_list(1:100000)
l2 <- vector_to_list(1:100000)

# first operation is slower
microbenchmark(lst <- concat(l1, l2), times = 1)

# accessing the list after we concatenate l1 and l2 should be fast
microbenchmark(car(lst), times = 1)
microbenchmark(car(lst), times = 1)
#+END_SRC

Now we can try modifying concat to delay its evaluation by wrapping its return value in a thunk. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
concat <- function(l1, l2) {
    do_cat <- function(l1, l2) {
        rev_l1 <- nil
        while (!is_nil(l1)) {
            rev_l1 <- cons(car(l1), rev_l1)
            l1 <- cdr(l1)
        }
        result <- l2
        while (!is_nil(rev_l1)) {
            result <- cons(car(rev_l1), result)
            rev_l1 <- cdr(rev_l1)
        }
        result 
    }
    force(l1); force(l2)
    lazy_thunk <- function(lst) function() lst()
    lazy_thunk(do_cat(l1, l2))
}
#+END_SRC

Now concatenation should be a fast operation 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
# concat is 2 orders of magnitude faster
microbenchmark(lst <- concat(l1, l2), times = 1)

# we pay for it the first time we evaluate the list 
microbenchmark(car(lst), times = 1)
# but not the following times
microbenchmark(car(lst), times = 1)
#+END_SRC

We have just moved the cost of concatenation from the concat call to the first time we access the list. If we abandon the loop version of the concatenation function and go back to the recursive version, we get a simpler version where all operations are constant time. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
concat <- function(l1, l2) {
    force(l1); force(l2)
    if (is_nil(l1)) l2
    else {
        lazy_thunk <- function(lst) function() lst()
        lazy_thunk(cons(car(l1), concat(cdr(l1), l2)))
    }
}
#+END_SRC

By wrapping the recursive call in a think, we do not have the problem of recursing too deeply on long lists. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
# concat is now super quick
microbenchmark(lst <- concat(l1, l2), times = 1)

# accessing the list after we concatenate l1 and l2 is now also super quick 
microbenchmark(car(lst), times = 1)
microbenchmark(car(lst), times = 1)
#+END_SRC

If we could do the same thing with list reversal, we would have a queue with constant time worst case operations right away, but we cannot. 

We could try implementing it like this:

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
reverse <- function(lst) {
    r <- function(l, t) {
        force(l); force(t)
        if (is_nil(l)) t
        else {
            lazy_thunk <- function(lst) function() list()
            lazy_thunk(r(cdr(l), cons(car(l), t)))
        }
    }
    r(lst, nil)
}

# unfortunately, this is still slow
l <- vector_to_list(1:500)
microbenchmark(lst <- reverse(l), times = 1)
#+END_SRC

The function above just constructs a lot of thunks that when we evaluate the first -- which happens at the end of the function -- calls the entire recursion. This is essentially just a fancy way of doing the original recursive process. 

The best we can do is to use the iterative reversal from earlier and wrap it in a think

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
reverse <- function(lst) {
    do_reverse <- function(lst) {
        result <- nil
        while (!is_nil(lst)) {
            result <- cons(car(lst), result)
            lst <- cdr(lst)
        }
        result
    }
    force(lst)
    lazy_thunk <- function(lst) function() lst()
    lazy_thunk(do_reverse(lst))
}

# the first time we access the list we pay for it, but subsequent access is cheap again 
l <- vector_to_list(1:100000)

microbenchmark(lst <- reverse(l), times = 1)
microbenchmark(car(lst), times = 1)
microbenchmark(car(lst), times = 1)
#+END_SRC

** Amortized Constant Time, Logarithmic Worst-Case, Lazy Queues

We represent the queue as a front and back list as before, and we have to keep track of the lengths of the lists here as well. We will also be using lazy lists. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
# constructor for the queue 
lazy_queue <- function(front, back, front_length, back_length) {
    structure(list(front = front,
                   back = back,
                   front_length = front_length,
                   back_length = back_length),
              class = "lazy_queue")
}

# check for emptiness
empty_lazy_queue <- function() lazy_queue(nil, nil, 0, 0)
is_empty.lazy_queue <- function(x) is_nil(x$front) && is_nil(x$back)

#+END_SRC
